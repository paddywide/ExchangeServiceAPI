name: Build and Push .NET Core App to Amazon ECR

on: [push]

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - run: echo "Checkout source code"
      - name: Checkout source code
        uses: actions/checkout@v4

      # - name: Verify AWS CLI Installation
      #   run: aws --version

      # - name: Test AWS CLI Configuration
      #   run: aws sts get-caller-identity --region ${{ secrets.AWS_REGION }}
      #   env:
      #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      # Step 2: Configure AWS Credentials
      - name: Prepare AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # Step 3: Build the Docker image for .NET Core
      - name: Build Docker image
        run: |
          docker build -t exchangerate-api .
          docker tag exchangerate-api:latest 741448956915.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/er/exchangerate-api:api

      # Step 4: Push the Docker image to Amazon ECR
      - name: Push Docker image to Amazon ECR
        run: |
          docker push 741448956915.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/er/exchangerate-api:api

      # Step 5: Deploy to EC2
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST_IP }}  # EC2 public IP or DNS
          username: ec2-user  # EC2 username
          key: ${{ secrets.SSH_PRIVATE_KEY }}  # Private key for SSH
          script: |
            # Configure AWS Credentials for ECR authentication
            export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
            export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
            export AWS_DEFAULT_REGION=${{ secrets.AWS_REGION }}
            
            # Log in to AWS ECR
            aws ecr get-login-password --region ap-southeast-2 | docker login --username AWS --password-stdin 741448956915.dkr.ecr.ap-southeast-2.amazonaws.com

            # Pull the latest .NET Core image
            docker pull 741448956915.dkr.ecr.ap-southeast-2.amazonaws.com/er/exchangerate-api:api

            # Stop and remove the existing .NET Core container
            docker stop exchangerate-api || true
            docker rm exchangerate-api || true

            # Run the new .NET Core container
            docker run -d --name exchangerate-api --network my-network -p 5000:5000 741448956915.dkr.ecr.ap-southeast-2.amazonaws.com/er/exchangerate-api:api

            # Clean up old Docker images
            docker image prune -f
